<notextile><?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>README</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" href="css/reset.css" type="text/css" media="screen" />
    <link rel="stylesheet" href="css/main.css" type="text/css" media="screen" />
    <script src="js/jquery-1.3.2.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="js/jquery-effect.js" type="text/javascript" charset="utf-8"></script>
    <script src="js/main.js" type="text/javascript" charset="utf-8"></script>
</head>
<body></notextile>
<notextile><div class="banner"></notextile>
h1. README

<notextile></div></notextile>
<notextile>
<div id="bodyContent">
<div id="content">
<div class="description">
</notextile>

h2. Welcome to NWNDoc

NWNDoc is a developper documentation to the NWNScript language, used in the
game Neverwinter Nights. It is based on "NWNLexicon":http://www.nwnlexicon.com but with better search options.

h2. Getting Started

Just write part of a function name in the left bar and off you go!

h2. Getting your own version

If you're using this site from the web, you can download it locally from "here":http://github.com/Youx/nwndoc/downloads/. No php, database, web server or anything is required. Download, extract, launch index.html in your favourite browser.

h2. How it works

h3. Sources

NWNDoc uses "NWNLexicon":http://www.nwnlexicon.com as it sources.
You can check out all the source data and generation code from "nwndoc's project page":http://github.com/Youx/nwndoc

h3. Format

However, the HTML files were translated into a descriptive format
called YAML.
With YAML, we simply describe how a function help page is represented :
There is a "name:" field, a "shortdesc:" field, a "bugs:" field, a "parameters:", with each parameter having a type, a name, a description, a default value, ...

<notextile>
<pre>
---
name: MyFunctionName
shortdesc: A short description of the function
parameters:
  - type: int
    name: parameter1
    desc: description of parameter 1
  - type: location
    name: parameter2
    desc: description of parameter 2
    default: DEFAULT_VALUE2
bugs: |
  Here we can write there is a known bug for this function
  and we can span it on multiple lines.
requires: |
  #include "functionrequiresthatfile"
example: |
  Here is an example
</pre>
</notextile>

The good thing about this is that it's a strict descriptive representation, not a visual one (like html). We can then translate this YAML file into whatever form we want

h3. Transformations

h4. YAML -> Textile

Each YAML file goes through a template (we use ruby liquid templates), we formats it into a textile format
At the end of this process, we obtain a file in the Textile format, that would look like this : 

<notextile>
<pre>
h1. MyFunctionName

h4. A short description of the function

MyFunctionName(
  int parameter1, /* description of parameter 1 */
  location parameter2 = DEFAULT_VALUE2 /* description of parameter 2 */
);

h4. Requires

#include "functionrequiresthatfile"

h4. Example

Here is an example

h4. Known bugs

Here we can write there is a known bug for this function
and we can span it on multiple lines.
</pre>
</notextile>

h4. Textile -> HTML

The textile file is then processed by textile, @h1.@ is replaced by stuff like @<h1></h1>@ and we have a html file

h3. Indexing

So what is the purpose you ask? We had NWNLexicon HTML files, we translated them to YAML, so that we could process those into Textile and then back to HTML?
Well, the interesting thing is : YAML can be processed, so we can do more than YAML -> HTML. For example, let's index all the function names and put those into javascript, so that we can easily query the function name or the description of the function!
Or let's index all the Functions and Constants names to put links in the html that point to other functions!

h3. How to help?

To modify a function, it's easy : you just modify (or add) the corresponding .yaml file, and just send the modifications.
If you are more technically inclined and know how to use a version system, fork the project on github and I'll just have to pull in the modifications you make.

h3. How to build

If you are a developer and want to generate all the HTML files and javascript, you will need :

* "ruby":http://www.ruby-lang.org
* liquid (a ruby gem) -> @sudo gem install liquid@
* RedCloth (a ruby gem) -> @sudo gem install RedCloth@
* json (a ruby gem) -> @sudo gem install json@
* coderay (a ruby gem) -> @sudo gem install coderay@
* A little time, generating everything takes about 1-2 minutes on my computer.

h3. What needs to be done

* Add some stuff, like VFX images, data types, more examples for 1.69 functions, ...

h3. I used stuff from : 

* The "sdoc":http://github.com/voloko/sdoc project, that created the search function
* The "jekyll":http://github.com/mojombo/jekyll project for the syntax highlighting bindings and the concept to generate static html from YAML/Textile
* "NWNLexicon":http://www.nwnlexicon.com of course for the content

<notextile>
</div></div></div>
</body></html>
</notextile>
