---
type: Function
name: ItemPropertyDamageBonus
shortdesc: Sets a damage bonus itemproperty.
return: itemproperty
parameters:
  - type: int
    name: nDamageType
    desc: | IP_CONST_DAMAGETYPE_*

  - type: int
    name: nDamage
    desc: | IP_CONST_DAMAGEBONUS_*

description: |
  Sets item property Damage bonus. You must specify the damage type constant (IP_CONST_DAMAGETYPE_*) and the amount of damage constant (IP_CONST_DAMAGEBONUS_*). 
  NOTE: not all the damage types will work; use only the following: Acid, Bludgeoning, Cold, Electrical, Fire, Piercing, Slashing, Sonic.
remarks: |
  The itemproperty commands are special constructors - they construct an itemproperty "object" which can then be applied to an item using the AddItemProperty command, much like effects need to be first constructed, then applied with ApplyEffectToObject. 
  It will often be a good idea to remove similar itemproperties from the item first. There's a command in the "x2_inc_itemprop" include file called IPSafeAddItemProperty which will do that for you. Check IPSafeAddItemProperty for current bug report. 
  The IP_CONST_DAMAGETYPE_* constant can be retrieved off this type of item property using GetItemPropertySubType. The IP_CONST_DAMAGEBONUS_* constant can be retrieved using GetItemPropertCostTableValue. 
version: 1.61
example: |
  #include "x2_inc_itemprop"
  //The include is for the IPSafeAddItemProperty function
  //Makes the PC speaker's onhand weapon deal 1d10 additional acid damage
  void main()
  {
  object oPC=GetPCSpeaker();
  object oItem = GetItemInSlot(INVENTORY_SLOT_RIGHTHAND, oPC);
  int nDamageType = IP_CONST_DAMAGETYPE_ACID;
  int nDamage = IP_CONST_DAMAGEBONUS_1d10;
  if (!GetIsObjectValid(oItem)) return; //stop if no weapon
  itemproperty ipAdd = ItemPropertyDamageBonus(nDamageType, nDamage);
  IPSafeAddItemProperty(oItem, ipAdd);
  }
seealso:
  categories:
    - Item Creation
  constants:
    - IP_CONST_DAMAGEBONUS_* Constants
    - IP_CONST_DAMAGETYPE_* Constants
author: Lilac Soul
editor: Peter Busby

